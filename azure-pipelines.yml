# Maven package Java project Web App to Linux on Azure
# Build your Java project and deploy it to Azure as a Linux web app
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

variables:

  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: '90d4afc7-02d5-46df-abd7-82c250b0efb0'
  
  # App name
  appName: 'greeting-service'

  # Environment name
  environmentName: 'greeting-service'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  imageRepository: 'aquaraga/greeting'

  dockerRegistryServiceConnection: 'greeting-registry-connection'

  #Todo: Need to check if service connection can be used instead of this property
  containerRegistry: 'greetingregistry.azurecr.io'

  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'

  tag: 'latest'

stages:

# - stage: Build
#   displayName: Build stage
#   jobs:
#   - job: MavenPackageAndPublishArtifacts
#     displayName: Maven Package and Publish Artifacts
#     pool:
#       vmImage: $(vmImageName)
    
#     steps:
#     - task: Cache@2
#       inputs:
#         key: 'maven | "$(Agent.OS)" | **/pom.xml'
#         restoreKeys: |
#           maven | "$(Agent.OS)"
#           maven
#         path: $(MAVEN_CACHE_FOLDER)
#       displayName: Cache Maven local repo

#     - task: Maven@3
#       displayName: 'Maven Package'
#       inputs:
#         mavenPomFile: 'pom.xml'

#     - task: CopyFiles@2
#       displayName: 'Copy Files to artifact staging directory'
#       inputs:
#         SourceFolder: '$(System.DefaultWorkingDirectory)'
#         Contents: '**/target/*.?(war|jar)'
#         TargetFolder: $(Build.ArtifactStagingDirectory)

#     - task: Docker@2
#       displayName: 'Login to ACR'
#       inputs:
#         command: login
#         containerRegistry: $(dockerRegistryServiceConnection)

#     - task: Docker@2
#       displayName: 'Build and push an image to container registry'
#       inputs:
#         command: buildAndPush
#         repository: $(imageRepository)
#         containerRegistry: $(dockerRegistryServiceConnection)
#         dockerfile: '$(Build.SourcesDirectory)/Dockerfile'


- stage: Deploy
  displayName: Deploy stage
  jobs:
  - job: DeployLinuxApp
    displayName: Deploy Linux App
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: AzureWebAppContainer@1
      displayName: 'Azure Web App on Container Deploy'
      inputs:
        azureSubscription: $(azureSubscription)
        appName: $(appName)
        imageName: $(containerRegistry)/$(imageRepository):$(tag)